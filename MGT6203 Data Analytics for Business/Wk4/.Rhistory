install.packages("swirl")
library(swirl)
swirl()
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(knitr)
install.packages('knitr', dependencies = T)
install.packages("knitr", dependencies = T)
install.packages(c("cluster", "Matrix", "nlme"))
unlink('DataAnalysis/Udacity/Exploratory Data Analysis/eda-course-materials/lesson2/demystifyingR2_cache', recursive = TRUE)
knit_with_parameters('~/DataAnalysis/Udacity/Exploratory Data Analysis/eda-course-materials/lesson2/demystifyingR2.Rmd')
car <- subset(mtcars, mpg >= 30 | hp < 60)
car
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
install.packages("ggplot2")
if (!require(Ecdat)) install.packages("Ecdat")
library(Ecdat)
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if (!require(ISLR)) install.packages("ISLR")
library(ISLR)
if (!require(GGally)) install.packages("GGally")
library(GGally)
if (!require(car)) install.packages("car")
library(car)
?Housing
summary(Housing)
str(Housing)
View(head(Housing,10))
summary(Housing)
str(Housing)
?Housing
summary(Housing)
str(Housing)
View(head(Housing,10))
#table(housing[1:15,],caption='Housing Prices')
h1 <- data.frame(Housing$price, Housing$lotsize, Housing$bedrooms)
View(head(h1,15))
# some useful statistics
pp <- Housing$price
pricesd <- sd(pp)
mean(Housing$price)
median(Housing$price)
lot <- Housing$lotsize
lotsd <- sd(lot)
mean(Housing$lotsize)
median(Housing$lotsize)
res <- cor(h1)
round(res,2)
ggplot(data=Housing, aes(Housing$price)) +
geom_histogram(breaks=seq(25000, 190000, by =10000),
col="red",
fill="green",
alpha = .2) +
labs(title="Histogram for price") +
labs(x="price", y="Count")
ggplot(data=Housing, aes(Housing$lotsize)) +
geom_histogram(breaks=seq(0, 17000, by =1000),
col="red",
fill="green",
alpha = .2) +
labs(title="Histogram for lotsize") +
labs(x="lotsize", y="Count")
summary(h1)
ggpairs(h1,
upper = list(continuous = wrap("cor", size = 9)))
a.lm <- lm(formula = price ~ lotsize , data = Housing)
summary(a.lm)
anova(a.lm)
ggplot(data=h1, aes(x=lotzie,y=price))+
geom_point()
ggplot(data=h1, aes(x=lotsize,y=price))+
geom_point()
View(h1)
ggplot(data=house, aes(x=lotsize,y=price))+
geom_point()
ggplot(data=Housing, aes(x=lotsize,y=price))+
geom_point()
ggplot(data=Housing, aes(x=lotsize,y=price))+
geom_point()+
geom_line()
?geom_smooth
ggplot(data=Housing, aes(x=lotsize,y=price))+
geom_point()+
geom_smooth(method="lm")
ggplot(data=Housing, aes(x=lotsize,y=price))+
geom_point()+
geom_smooth(method="lm",se=False)
ggplot(data=Housing, aes(x=lotsize,y=price))+
geom_point()+
geom_smooth(method="lm",se=FALSE)
ggplot(Housing, aes(x=lotsize, y=price)) + geom_point() +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
b.lm <- lm(formula = price ~ bedrooms, data = Housing)
ggplot(Housing, aes(x=bedrooms, y=price)) + geom_point() +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
se=FALSE,    # Don't add shaded confidence region
fullrange=TRUE) # Extend regression lines
ab.lm <- lm(formula = price ~ lotsize + bedrooms, data = Housing)
summary(ab.lm)
anova(ab.lm)
newdata = data.frame(lotsize=3000, bedrooms = 2)
predict(ab.lm, newdata, interval = "predict")
knit_with_parameters('~/Google Drive/Edx/ISY6501 Introduction to Analytics Modeling/ISYE6501/ISYE6501 HW Wk1 Solution.Rmd')
knit_with_parameters('~/Google Drive/Edx/ISY6501 Introduction to Analytics Modeling/ISYE6501/ISYE6501 HW Wk1 Solution.Rmd')
knitr::opts_chunk$set(echo = TRUE)
install.packages("ISLR")
library(ISLR)
data("Carseats")
str(carseats)
str(Carseats)
model_lm = lm(Sales~Price, data=Carseats)
summary(model_lm)
View(Carseats)
model_lm_2 = lm(Sales~Price, Shelveloc, data=Carseats)
?lm
model_lm_2 = lm(Sales~Price+Shelveloc, data=Carseats)
model_lm_2 = lm(Sales~Price+Shelveloc, data=Carseats)
model_lm_2 = lm(Sales~Price + ShelveLoc, data=Carseats)
summary(model_lm_2)
Carseats$ShelveGood[ShelveLoc == 'Good']=1
Carseats$ShelveGood[Carseat$ShelveLoc == 'Good']=1
Carseats$ShelveGood[Carseats$ShelveLoc == 'Good']=1
Carseats$ShelveBad[Carseats$ShelveLoc == 'Bad']=1
Carseats$ShelveGood[Carseats$ShelveLoc == 'Good']=1 else 0
model_2 = lm(Sales ~ Price + ShelveGood + ShelveBad)
model_2 = lm(Sales ~ Price + ShelveGood + ShelveBad, data=Carseats)
Carseats$ShelveGood = 0
Carseats$ShelveBad = 0
Carseats$ShelveGood[Carseats$ShelveLoc == 'Good']=1
Carseats$ShelveBad[Carseats$ShelveLoc == 'Bad']=1
model_2 = lm(Sales ~ Price + ShelveGood + ShelveBad, data=Carseats)
summary(model_2)
13.863824-1.862022
getcwd()
getwd()
df = read.csv('/Users/Alex/Downloads/PriceDemand.csv')
View(df)
df = read.csv('/Users/Alex/Downloads/PriceDemand.csv', header=True)
df = read.csv('/Users/Alex/Downloads/PriceDemand.csv', header=TRUE)
str(df)
model_3 = lm(Qty~Price, data=df)
summary(model_3)
model_4 = lm(Qty~log(Price), data=df)
summary(model_4)
model_5 = lm(log(Qty)~(Price), data=df)
summary(model_5)
model_5 = lm(log(Qty)~Price, data=df)
summary(model_5)
model_6 = lm(log(Qty)~log(Price), data=df)
summary(model_5)
model_6 = lm(log(Qty)~log(Price), data=df)
summary(model_6)
install.packages("Ecdat")
install.packages(c("backports", "BH", "boot", "car", "carData", "caret", "cli", "clipr", "cluster", "cowplot", "curl", "data.table", "dendextend", "digest", "dplyr", "ellipsis", "evaluate", "factoextra", "FactoMineR", "fansi", "foreach", "foreign", "FrF2", "ggplot2", "ggpubr", "ggsignif", "glmnet", "haven", "hms", "htmltools", "httpuv", "igraph", "iterators", "kernlab", "KernSmooth", "knitr", "later", "latticeExtra", "lava", "leaps", "maptools", "markdown", "MASS", "Matrix", "memisc", "mgcv", "mime", "ModelMetrics", "nlme", "numbers", "partitions", "pillar", "pkgconfig", "pls", "plyr", "prettyunits", "prodlim", "promises", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "recipes", "repr", "rlang", "rmarkdown", "scales", "shiny", "sp", "SparseM", "SQUAREM", "stringi", "survival", "tibble", "tidyr", "tinytex", "vcd", "vctrs", "xfun", "zip", "zoo"))
if (!require(Ecdat)) install.packages("Ecdat")
library(Ecdat)
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if (!require(ISLR)) install.packages("ISLR")
library(ISLR)
if (!require(GGally)) install.packages("GGally")
library(GGally)
if (!require(car)) install.packages("car")
library(car)
library(Ecdat)
if (!require(Ecdat)) install.packages("Ecdat")
library(Ecdat)
if (!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
if (!require(ISLR)) install.packages("ISLR")
library(ISLR)
if (!require(GGally)) install.packages("GGally")
library(GGally)
if (!require(car)) install.packages("car")
library(car)
install.packages("car")
library(car)
?Housing
summary(Housing)
str(Housing)
View(head(Housing,10))
h1 <- data.frame(Housing$price, Housing$lotsize, Housing$bedrooms, Housing$bathrms)
pp <- Housing$price
pricesd <- sd(pp)
mean(Housing$price)
median(Housing$price)
lot <- Housing$lotsize
lotsd <- sd(lot)
mean(Housing$lotsize)
median(Housing$lotsize)
res <- cor(h1)
round(res,2)
ggplot(data=Housing, aes(Housing$price)) +
geom_histogram(breaks=seq(25000, 190000, by =10000),
col="red",
fill="green",
alpha = .2) +
labs(title="Histogram for price") +
labs(x="price", y="Count")
a.lm <- lm(formula = price ~ lotsize , data = Housing)
summary(a.lm) # what does this command do?
anova(a.lm)   # what does this command do?
R.version.string
install.packages(c("dplyr", "foreign", "gmp", "prettyunits", "repr", "rlang", "rmarkdown", "tidyr", "tidyselect", "vctrs", "yaml"))
R.version
knitr::opts_chunk$set(echo = TRUE)
library(car)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
library(car)
update.packages(checkBuilt = TRUE)
install.packages("car", dependencies=TRUE)
library(car)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(car)
install.packages(c("Rcpp","car"))
install.packages(c("Rcpp", "car"))
install.packages(c("Rcpp", "car"))
install.packages(c("Rcpp", "car"))
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(data.table)
library(car)
install.packages(c("dplyr", "yaml"))
install.packages(c("dplyr", "yaml"))
install.packages(c("dplyr", "yaml"))
knitr::opts_chunk$set(echo = TRUE)
install.packages("car")
install.packages("tidyverse")
library(car)
install.packages("car", dependencies = TRUE)
library(car)
library(tidyverse)
library(carData)
Salaries_Dataset <- as.tibble(carData::Salaries) #Lecture simply says "as.tibble(Salaries)"
View(Salaries_Dataset)
library(car)
install.packages("car", dependencies = TRUE)
library(car)
install.packages("psych")
install.packages("hflights")
View(Carseats)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv('direct_marketing.csv', header=TRUE)
str(df)
head(df, 10)
lm_1 <- lm(AmountSpent~Gender+Salary, data=df)
summary(lm_1)
View(df)
library(dplyr)
df <- df %>%
mutate(Married_v = as.factor(if_else(Married=='Married',1,0)))
lm_2 <- lm(AmountSpent~Gender+Salary+Married_v, data=df)
summary(lm_2)
library(MASS)
?Boston
?Boston
str(Boston)
df_2 <- Boston %>%
mutate(medv_v <- as.factor(if_else(medv>30,1,0))
View(lm_2)
df_2 <- Boston %>%
mutate(medv_v <- as.factor(if_else(medv>30,1,0)))
View(df_2)
View(df)
df_2 <- Boston %>%
mutate(medv_v = as.factor(if_else(medv>30,1,0)))
df_2 <- Boston %>%
mutate(medv_v = as.factor(if_else(medv>30,1,0))) %>%
select(-medv)
df_2 <- Boston %>%
mutate(medv_v = as.factor(if_else(medv>30,1,0))) %>%
select(-medv)
df_2 <- Boston %>%
mutate(medv_v = as.factor(if_else(medv>30,1,0))) %>%
select(medv)
df_2 <- Boston %>%
mutate(medv_v = as.factor(if_else(medv>30,1,0))) %>%
select(-medv)
df_2 <- Boston %>%
mutate(medv = as.factor(if_else(medv>30,1,0))) %>%
df_2 <- Boston %>%
mutate(medv = as.factor(if_else(medv>30,1,0)))
df_2 <- Boston %>%
mutate(medv = as.factor(if_else(medv>30,1,0)))
glm_3 <- glm(medv~., data = df_2)
glm(medv~., data = df_2)
glm_3 <- glm(medv~crim+zn, data = df_2)
glm_3 <- glm(medv~., data = df_2, family = 'binomial')
summary(glm_3)
df_2$predict_result <- predict(glm_3, df_2, type='response')
confusionMatrix(actual = df_2$medv, predict = df_2$predict_result>0.5)
df_2$predict_medv <- as.factor(if_else(df_2$predict_result>0.5,1,0))
confusionMatrix(actual = df_2$medv, predict = df_2$predict_result)
confusionMatrix(df_2$medv, df_2$predict_result)
library(caret)
confusionMatrix(df_2$medv, df_2$predict_result)
confusionMatrix(as.factor(df_2$medv), as.factor(df_2$predict_result))
confusionMatrix(df_2$predict_medv, df_2$medv, dnn=c("Prediction", "Reference"))
?predict
library(MASS)
library(ROCR)
Boston$Result <- ifelse(Boston$medv > 30,1,0)
names(Boston)
Boston$medv <- NULL
# Apply logistic regression algorithm on Boston data set train
logis <- glm(Result ~ ., data = Boston, family = binomial)
# Answer to QUESTION 1 and 2
summary(logis)
# Predict using the model built
Boston$pred <- predict(logis,data=Boston,type="response")
# Calculate confusion matrix
confusion_matrix <- table(actual=Boston$Result,predict=Boston$pred > 0.5)
confusion_matrix <- table(actual=Boston$Result,predict=Boston$pred > 0.5)
confusion_matrix
confusion_matrix <- table(predict=Boston$pred > 0.5,actual=Boston$Result)
confusion_matrix
?confusionMatrix
confusionMatrix(df_2$predict_medv, df_2$medv, dnn=c("Prediction", "Reference"), positive=1)
confusionMatrix(df_2$predict_medv, df_2$medv, dnn=c("Prediction", "Reference"), positive=2)
confusionMatrix(df_2$predict_medv, df_2$medv, dnn=c("Prediction", "Reference"), positive='1')
library(ROCR)
?auc
?prediction
pred <- prediction(df_2$predict_medv,df_2$medv) # create a prediction object in R
library(ROCR)
#ROC Curve
pred <- prediction(df_2$predict_medv,df_2$medv) # create a prediction object in R
pred <- prediction(df_2$predict_medv,df_2$medv)
prediction(df_2$predict_medv,df_2$medv)
pred <- prediction(df_2$predict_result,df_2$medv)
class(pred)
perf <- performance(pred, "tpr", "fpr") # tpr and fpr are true and false positive rates
plot(perf, colorize=T)
auc.perf <-  performance(pred, measure = "auc")
auc.perf@y.values
?auc
#ROC Curve
pred <- prediction(df_2$predict_result,df_2$predict_medv)
# create a prediction object in R
class(pred)
perf <- performance(pred, "tpr", "fpr") # tpr and fpr are true and false positive rates
plot(perf, colorize=T)
# calculate Area Under the Curve for this Logit Model
auc.perf <-  performance(pred, measure = "auc")
auc.perf@y.values
pred <- prediction(df_2$predict_result,df_2$medv)
perf <- performance(pred, "tpr", "fpr") # tpr and fpr are true and false positive rates
plot(perf, colorize=T)
# calculate Area Under the Curve for this Logit Model
auc.perf <-  performance(pred, measure = "auc")
auc.perf@y.values
?performance
perf <- performance(pred, "tpr") # tpr and fpr are true and false positive rates
plot(perf, colorize=T)
auc.perf <-  performance(pred, measure = "auc")
View(auc.perf)
View(df_2)
pred
?pred
?prediction
pred$auc
class(pred)
auc.perf <-  performance(pred, measure = "auc")
auc.perf
auc(df_2$predict_result, df_2$medv)
AUC(df_2$predict_result, df_2$medv)
library(cvAUC)
install.packages("cvAUC")
library(cvAUC)
AUC(df_2$predict_result, df_2$medv)
?AUC
df_2$predict_result <- predict(glm_3, df_2, type='response')
pred <- prediction(df_2$predict_result,df_2$medv)
auc.perf <-  performance(pred, measure = "auc")
auc.perf@y.values
getwd()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/MS Analytics/GT OMSA/SP20 MGMT 6203/Wk4")
logit_grade <- read_csv("GradesR.csv", col_types = list(
Student = col_integer(),
Grade = col_integer(),
Hours = col_double()))
a.lm <- lm(formula = Grade ~ Hours, data = logit_grade)
summary(a.lm)
anova(a.lm)
ol <- read_csv("oddslogodds.csv", col_types = list(
p = col_double(),
odds = col_double(),
logodds = col_double()))
str(ISLR::Default)
df <- ISLR::Default
df<- df %>%
mutate(dft = ifelse(default=="Yes",1,0)) %>%
mutate(stdt = ifelse(student=="Yes",1,0))
df <-  df %>%
mutate(pred_prob_model4 = predict(Model4, newdata = ., type = "response")) %>%
mutate(pred_outcome_model4 = ifelse(pred_prob_model4 >= 0.5,1,0))
Model4 <- glm(dft ~ balance + income + stdt, data = df, family = "binomial")
summary(Model4)
df <-  df %>%
mutate(pred_prob_model4 = predict(Model4, newdata = ., type = "response")) %>%
mutate(pred_outcome_model4 = ifelse(pred_prob_model4 >= 0.5,1,0))
# we are using 0.5 as cutoff for predicting Y=1.
View(df)
pred <- prediction(df$pred_prob_model4,df$dft)
auc.perf <-  performance(pred, measure = "auc")
auc.perf@y.values
